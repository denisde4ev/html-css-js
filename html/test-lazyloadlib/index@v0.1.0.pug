doctype html

meta(charset='UTF-8')
meta(name='viewport',content='width=device-width,initial-scale=1')
title Hello, World!
link(href='./style.css',rel='stylesheet')
link(
	rel="prefetch",
	href="https://cdn.jsdelivr.net/gh/denisde4ev/html-css-js/js/lib/q/q%400.1.0.js", as="script",
	onload="alert('onload')",
	onerror="alert('onerror')"
)
script.
	var req_basepath = 'https://cdn.jsdelivr.net/gh/denisde4ev/html-css-js/js/lib';
	// src: https://github.com/denisde4ev/html-css-js/raw/master/js/lib/req/req-synconly@0.1.0-alpha.js
	_m = {};
	var req=n=>{
	if(_m[n=n.replace(/^(https:\/\/)?(.*?)(\.js)?$/,(O,p,n,j)=>(u=p?O:req_basepath+'/'+n+(j||'.js'),n))]){return _m[n].exports}
	var u,m={exports:_m[n]={}},x=new XMLHttpRequest();x.open('GET',u,false);x.send();
	Function('module, exports',x.responseText+'\n\n//# sourceURL='+u+'\n')(m,_m[n]);
	return _m[n]
	};

script#js_req(
	onload="req.basepath=req_basepath,alert(req.modules=_m)",
	type="disabled",
	src="https://cdn.jsdelivr.net/gh/denisde4ev/html-css-js/js/lib/req/req%40v0.3.0-alpha.js"
)

script.
	alert('afterloaded');
	{
		let a = js_req;
		a.remove();
		a.removeAttribute('type');
		a = a.cloneNode();
		a.id += '_';
		document.head.appendChild(a);
	}
	
	function addPreload_js(url) {
		// this function will be used in sync requests, hope browser will make all at the same itme
		var el = document.createElement('link');
		el.rel = 'preload';
		el.href = url;
		el.as = 'script';
		// Object.assign(el, moreProps);
		document.head.appendChild(el);
		return el;
	}
	
	function prefetch_lazyfn(libName, fnNames, gDefine = true) {
		// this function will be used in sync requests, hope browser will make all at the same itme
		var url = n.replace(/^(https:\/\/)?(.*?)(\.js)?$/,(O,p,n)=>( p ? O : req_basepath+'/'+n+'.js' ));
		var el = document.createElement('link');
		el.rel = 'preload';
		el.href = url;
		el.as = 'script';
		// Object.assign(el, moreProps);
		document.head.appendChild(el);
		
		if (fnNames) {
			var obj = {};
			if (typeof fnNames === 'string') fnNames = [fnNames];
			for (let fnName of fnNames) {
				let lazyFn = function() {
					var fn = req(libName)[fnName];
					if (gDefine) globalThis[fnName] = fn;
					return lib.apply(this, arguments());
				} // TODO:!!! check if `let fnName` caching have created different variables for each cached functions
				if (gDefine) globalThis[fnName] = fn;
				obj[fnName] = fn;
			}
		}
		return {linkEl: el, obj: obj};
	}
	
	Q = function waitingMany(names) {
		names.forEach(name => {
			// NOTE:! for now not expected name to be full url!
			addPreload_js(req_basepath + '/' + name + '.js');
		});
	
		return names.map(name => req(name));
	};
	q = function waitingQ(...a) {
		return (q=req('q/q%400.1.0').q||q)(...a);
	};

h1(onclick="q('#content').html('clicked')") click me

p#content

script(src='./script.js')
