doctype html

meta(charset='UTF-8')
meta(name='viewport',content='width=device-width,initial-scale=1')
title Hello, World!
style @media(prefers-color-scheme:dark){html{color-scheme:dark}

-
	i=(
		(fs.readFileSync(
			filename.replace(/\/?[^/]*$/,'')+'/../../'+
			'js/lib/req/req-synconly@v0.1.2.js'
		)+'').replace(/\n?^req.b = \{__proto__:null\};.*\n?/m, '\n')
	)

script!= i
script.
	req.b = ( // req.basepath
		location.hostname === 'www.denisde4ev.xyz' || location.hostname === 'denisde4ev.xyz' ?
			'//js.denisde4ev.xyz'
		: location.hostname === 'denisde4ev.github.io' ?
			'/html-css-js/js/lib'
		// location.hostname === null && location.href === 'file://...' // origin=null and no "Access-Control-Allow-Origin" for files duh..
		: location.hostname === 'localhost' && location.pathname.startsWith('/html/test-lazyloadlib/') ?
			'/js/lib'
		:
			'https://cdn.jsdelivr.net/gh/denisde4ev/html-css-js/js/lib'
	);
	
	
	if (navigator.connection) {
		var fastConnection = !/2g/.test(navigator.connection.effectiveType); // 'slow-2g' || '2g' || unef
		defT = !navigator.connection.saveData && (
			fastConnection ? 6e3 : 0.5e3
		);
	} else {
		defT = 2e3;
	}
	
	// TODO: add _l as lazy loaded modules.exports. `e = _m[n] || {}` use replace _m with _l
	var l = function prefetch_lazyfn(n, F, t) {
		if (t === void 0) t=1;
		t *= defT;
		if (t) {
			setTimeout(_=>{
				if (Object.hasOwn(_m, n)) { console.info('lib already loaded bef prefetch', n); return; }
				var el = document.createElement('link'), u = req.p(n) /*TESTING: + '?v=' + Math.random()*/;
				el.rel = 'prefetch'; el.href = u; el.as = 'script';
				el.onload = _ => {
					if (Object.hasOwn(_m, n)) { console.info('lib already loaded bef async script', n); return; }
					console.log('will async load script')
					var el = document.createElement('script');
					el.async = 1; el.src = u;
					el.onload = _ => { console.log('script loaded'); };
					document.head.appendChild(el);
				}
				document.head.appendChild(el);
				console.log('added prefetch');
			}, t)
		}
		
		for (let f of typeof F === 'string'?[F]:F) {
			globalThis[f] = function() { // note: if lazyFn is cached and recalled multiple times might redefine fn in globalThis again and again
				return (globalThis[f] = req(n)[f]||_m[n]._).apply(this, arguments);
			}
		}
	}
	
	l(localStorage.qFirefoxDebug ? 'q/q%400.1.0-firefoxpredict.js' : 'q/q%400.1.0','q');

button(onclick="q('#content').html('clicked '+Math.random())") click me
p#content
